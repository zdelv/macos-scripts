#!/bin/bash

########################### VARIABLES ########################### 

#Num  Colour    #define         R G B
#
#0    black     COLOR_BLACK     0,0,0
#1    red       COLOR_RED       1,0,0
#2    green     COLOR_GREEN     0,1,0
#3    yellow    COLOR_YELLOW    1,1,0
#4    blue      COLOR_BLUE      0,0,1
#5    magenta   COLOR_MAGENTA   1,0,1
#6    cyan      COLOR_CYAN      0,1,1
#7    white     COLOR_WHITE     1,1,1

bold=$(tput bold)
normal=$(tput sgr0)
cyan=$(tput setaf 6)
green=$(tput setaf 2)
red=$(tput setaf 1)
white=$(tput setaf 7)

scriptName="flashdevice.sh"

noverify=0
verbose=0
dmg_location=""
drive_location=""

########################### COMMAND LINE ARGS ########################### 

# Print usage
usage() {
printf "\n"
echo "${scriptName} -d "PATH" --dev "PATH" [OPTIONS]

Drive flashing utility. Given the path to a DMG and dev path to a drive, flash the drive using ASR.

 Required:
  -d, --dmg	    Path to DMG
  --dev, --drive    Path to drive for imaging (/dev/disk2 etc)

 Options:
  -h, --help        Display this help and exit
  -v, --verbose     Enable verbose output
  --noverify        Do not verify before restoring (just run the script)
"
}

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?*)
      # Loop over each character starting with the second
      for ((i=1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;

    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Print help if no arguments were passed.
# Uncomment to force arguments when invoking the script
[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -d|--dmg) shift; dmg_location=${1} ;;
    --dev|--drive) shift; drive_location=${1} ;;
    -v|--verbose) verbose=1 ;;
    -h|--help) usage; exit 0; ;;
    --noverify) noverify=1; ;;
    *) echo "invalid option: '$1'."; exit 1; ;;
  esac
  shift
done

if [[ -z $dmg_location || -z $drive_location ]]; then
	echo "-d or --dev must be passed"
	exit 1
fi

# Store the remaining part as arguments.
args+=("$@")

########################### SANITY CHECK DATA ########################### 

if [[ -d $dmg_location && -d $drive_location ]]; then
	echo "File locations must be passed as a path"
	echo "DMG: ${dmg_location}"
	echo "Drive: ${drive_location}"
	exit 1
fi

# Check if the drive given is internal or external (0=anything else, >0=internal)
internal_drive=$(diskutil list | grep $drive_location | grep -c "internal")

if [[ $internal_drive -eq 0 ]]; then
	echo
	echo "The drive selected is not an internal drive!"
	echo -n "Are you sure you would like to continue? [y/n]: "
	read ynprompt

	if [[ $ynprompt == "y" ]]; then
		echo
	else
		echo
		echo "${red}Exiting${white}"
		exit 1
	fi
fi

if [[ $noverify -ne 1 ]]; then
	echo
	echo "---------------------------------------------"
	echo "The following will occur:"
	echo "Drive ${cyan}${bold}"${drive_location}"${normal}${white} will be erased."
	echo "DMG located at ${cyan}${bold}"${dmg_location}"${normal}${white} will be restored."
	echo -n "Are you sure this is correct? [y/n]: "
	read ynprompt
	echo "---------------------------------------------"

	if [[ $ynprompt == "y" ]]; then
		echo
		echo "Continuing . . . "
	else
		echo
		echo "${red}Exiting${white}"
		exit 1
	fi

fi


########################### ERASE DISK (diskutil) ########################### 

echo
echo "---------------------------------------------"
echo "Erasing drive ${cyan}${bold}"${drive_location}"${normal}${white} . . . "

diskutil eraseDisk APFS "Macintosh HD" "${drive_location}"

# Check if diskutil ended sucessfully or not
if [[ $? -eq 0 ]]; then
	echo "${green}${bold}Sucessfully erased disk!${white}${normal}"
else
	echo "${red}${bold}Failed to erase disk!${white}${normal}"
	exit 1
fi
echo "---------------------------------------------"

########################### RESTORE (ASR) ########################### 

echo
echo "---------------------------------------------"
echo "Restoring DMG ${cyan}${bold}"${dmg_location}"${normal}${white} onto empty drive . . . "

# Restore the dmg onto the now empty drive
if [[ $verbose ]]; then
	asr restore -s "${dmg_location}" -t "${drive_location}s2" -erase -noverify -noprompt --verbose
	echo
else
	asr restore -s "${dmg_location}" -t "${drive_location}s2" -erase -noverify -noprompt 
	echo
fi

# Check if ASR ended sucessfully or not
if [[ $? -eq 0 ]]; then
	echo "${green}${bold}Sucessfully restored disk!${white}${normal}"
else
	echo "${red}${bold}Failed to restore disk!${white}${normal}"
	exit 1
fi
echo "---------------------------------------------"

########################### COMPLETE ########################### 

# If you reach here, all went well!
echo
echo "${green}${bold}Finished!${white}${normal}"
